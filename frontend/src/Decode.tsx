import React from 'react'


export const Decode:React.FC = () => {
    const base64String = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,';

    const downloadExcelFile = (base64Data: string, fileName: string) => {
        const byteString = atob(base64Data.split(',')[1]);
        const arrayBuffer = new ArrayBuffer(byteString.length);
        const int8Array = new Uint8Array(arrayBuffer);

        for (let i = 0; i < byteString.length; i++) {
            int8Array[i] = byteString.charCodeAt(i);
        }

        const blob = new Blob([arrayBuffer], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});
        const url = URL.createObjectURL(blob);

        const link = document.createElement('a');
        link.href = url;
        link.download = fileName.endsWith('.xlsx') ? fileName : `${fileName}.xlsx`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    downloadExcelFile(base64String, 'MySpreadsheet');

    return (
    <div>
      <button onClick={() => downloadExcelFile(base64String, 'MySpreadsheet')}>
        Download Excel File
      </button>
    </div>
  );
}
